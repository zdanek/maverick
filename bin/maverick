#!/bin/bash

# Maverick - UAV Companion Computer system
# http://github.com/goodrobots/maverick


### Define functions
mavenv () {
    if [ "x$1" == "xdev" ]; then
        echo "Maverick Environment:   ${bgr}${white}${bold} dev ${reset}"
    elif [ "x$1" == "xflight" ]; then
        echo "Maverick Environment:   ${bgg}${white}${bold} flight ${reset}"
    elif [ "x$1" == "xbootstrap" ]; then
        echo "Maverick Environment:   ${bgb}${white}${bold} bootstrap ${reset}"
    elif [ "x$1" == "xminimal" ]; then
        echo "Maverick Environment:   ${bgb}${white}${bold} minimal ${reset}"
    fi
}

status () {
    if [ $3 -eq 0 ]; then
        _status="${green}Running${reset}"
    else
        _status="${red}Stopped${reset}"
    fi
    if [ $4 -eq 0 ]; then
        _atboot="${green}Enabled${reset}"
    else
        _atboot="${red}Disabled${reset}"
    fi
    echo "$1:$2:$_status | $_atboot\n"
}

startservice() {
    srvresult=$(sudo systemctl start "$1" 2>&1)
    if [ $? -eq 0 ]; then
        echo " Start: ${green}Success${reset}"
    else
        echo " Start: ${red}Failure${reset}: $srvresult"
    fi
}

stopservice() {
    srvresult=$(sudo systemctl stop "$1" 2>&1)
    if [ $? -eq 0 ]; then
        echo " Stop: ${green}Success${reset}"
    else
        echo " Stop: ${red}Failure${reset}: $srvresult"
    fi
}

disableservice() {
    srvresult=$(sudo systemctl disable "$1" 2>&1)
    if [ $? -eq 0 ]; then
        echo " Disable: ${green}Success${reset}"
    else
        echo " Disable: ${red}Failure${reset}: $srvresult"
    fi
}

getservices() {
    services=$(systemctl list-units -a -q --plain --no-pager |grep -e 'maverick-.*.service' |awk {'print $1'})
    echo $services
}

# Define usage function
usage () {
    echo "Usage: ${green}maverick command [parameter] [--options]${reset}"
    echo
    echo "Commands"
    echo " status       [service]                  Show status of all services, optional service name for status of single service"
    echo " info                                    Display system information"
    echo " netinfo                                 Display network information"
    echo " self-update                             Update to latest maverick code"
    echo " configure    [options]                  Configure system - ${bold}BEWARE this may make major changes to your existing system${reset}"
    echo " start        [service | all]            Start Maverick service, "
    echo " stop         [service | all]            Stop Maverick service"
    echo " restart      [service]                  Restart Maverick service"
    echo " enable       [service]                  Enable Maverick service at boot"
    echo " disable      [service | all]            Disable Maverick service at boot"
    echo " log          [service]                  Display realtime log for Maverick service"
    echo " unshallow                               Unshallow a git repo"
    echo
    echo "Configure Options"
    echo " --env=[bootstrap|dev|flight|minimal]    Environment to configure: bootstrap, dev, flight or minimal"
    echo " --dryrun                                Configure dry run - just show what would be done"
    echo " --module=<module>                       Only make changes to module <module>"
    echo " --debug                                 Debug output"
    echo " --profile                               Profile performance data"
    echo
    echo "${bgr}${bold}WARNING: Maverick may make major changes to the system is it running on.${reset}"
    echo "${bgr}${bold}Please do not run without understanding what it does.${reset}"
    echo
    exit 1
}
### End functions


# If tput is available, populate colour variables
if hash tput 2>/dev/null; then
    bgbl=$(tput setab 0)
    bgr=$(tput setab 1)
    bgg=$(tput setab 2)
    bgb=$(tput setab 4)
    bgw=$(tput setab 7)
    bold=$(tput bold)
    red=$(tput setaf 1)
    green=$(tput setaf 2)
    yellow=$(tput setaf 3)
    blue=$(tput setaf 12)
    white=$(tput setaf 7)
    reset=$(tput sgr0)
fi

# Determine script path
_path=$(dirname $0)
_path=$(cd $_path && pwd)
_path=$(dirname $_path)

if [ -f "/srv/maverick/software/maverick/VERSION" ]; then
    ver=$(cat /srv/maverick/software/maverick/VERSION)
elif [ -f "${_path}/VERSION" ]; then
    ver=$(cat ${_path}/VERSION)
else
    ver=""
fi
if [ -z $ver ]; then
    ver="n/a"
fi
echo
echo "${bgb}${bold}Maverick - UAV Companion Computer System - Version ${ver}${reset}"

echo

# Check that we're root or mav user
if [[ $EUID -ne 0 && $USER != "mav" ]]; then
    echo "Error: This must be run as root or mav user"
    echo
    exit 1
fi

if [[ $# -eq 0 ]] ; then
    usage
fi

# Parse arguments
for i in "$@"
do
    case $i in
        --env=*)
            ENV="${i#*=}"
            shift
            ;;
        --dryrun)
            DRYRUN="--noop"
            shift
            ;;
        --debug)
            DEBUG="--debug"
            shift
            ;;
        --profile)
            PROFILE="--profile"
            shift
            ;;
        --module=*)
            MODULE="${i#*=}"
            shift
            ;;
        --confirm)
            CONFIRM="true"
            shift
            ;;
        configure)
            CONFIGURE="true"
            shift
            ;;
        status)
            STATUS="true"
            shift
            ;;
        info)
            INFO="true"
            shift
            ;;
        netinfo)
            NETINFO="true"
            shift
            ;;
        self-update)
            SELFUPDATE="true"
            shift
            ;;
        start)
            START="true"
            shift
            ;;
        stop)
            STOP="true"
            shift
            ;;
        restart)
            RESTART="true"
            shift
            ;;
        enable)
            ENABLE="true"
            shift
            ;;
        disable)
            DISABLE="true"
            shift
            ;;
        log)
            LOG="true"
            shift
            ;;
        unshallow)
            UNSHALLOW="true"
            shift
            ;;
        *)
            # If stop or start action, grab the service name from next argument
            if [ "${START}" == "true" -o "${STOP}" == "true" -o "${RESTART}" == "true" -o "${ENABLE}" == "true" -o "${DISABLE}" == "true" -o "${LOG}" == "true" -o "${STATUS}" == "true" ]; then
                SERVICE="${i#*}"
                shift
            else
                echo "Error: argument not recognised"
                echo
                usage
            fi
            ;;
    esac
done

# Migrate old config location - #637
if [ -d /srv/maverick/data/config ]; then
    if [ ! -d /srv/maverick/config ]; then
        echo "Migrating config from /srv/maverick/data/config to /srv/maverick/config"
        mv /srv/maverick/data/config /srv/maverick/config
        ln -s /srv/maverick/config /srv/maverick/data/config
    fi
fi

# Migrate maverick local config to /srv/maverick/config/maverick
if [ -L /srv/maverick/config/maverick ]; then
    echo "Migrating maverick local config from /srv/maverick/software/maverick/conf to /srv/maverick/config/maverick"
    rm -f /srv/maverick/config/maverick
    mkdir /srv/maverick/config/maverick
    mv /srv/maverick/software/maverick/conf/localconf.json /srv/maverick/config/maverick
    mv /srv/maverick/software/maverick/conf/local-nodes /srv/maverick/config/maverick
    mv /srv/maverick/software/maverick/conf/maverick-branch.conf /srv/maverick/config/maverick
    mv /srv/maverick/software/maverick/conf/maverick-environment.conf /srv/maverick/config/maverick
fi

# If git branch config file exists, source it
if [ -e /srv/maverick/config/maverick/maverick-branch.conf ]; then
    source /srv/maverick/config/maverick/maverick-branch.conf
fi
if [ -e /srv/maverick/config/maverick-branch.conf ]; then
    source /srv/maverick/config/maverick-branch.conf
fi
# If git branch not set by now, set it to stable by default
if [ -z $MAVERICK_BRANCH ]; then
    MAVERICK_BRANCH=stable
fi

if [ "$MAVERICK_BRANCH" != "stable" ]; then
    echo "${bgbl}${bold}${red}WARNING: Maverick is using branch:${MAVERICK_BRANCH}, not stable${reset}"
    echo
fi

# Migrate old environment marker to new location
if [ -e /srv/maverick/.environment ]; then
    mv -f /srv/maverick/.environment /srv/maverick/config/maverick/maverick-environment.conf
fi

# If self-update set, action and then exit
if [ "$SELFUPDATE" == "true" ]; then
    # If config branch is different to current branch, change branch
    CURRENT_BRANCH=$(cd /srv/maverick/software/maverick; git rev-parse --abbrev-ref HEAD)
    if [ $CURRENT_BRANCH != $MAVERICK_BRANCH ]; then
        echo "Changing maverick branch from ${CURRENT_BRANCH} to ${MAVERICK_BRANCH}"
        # Unshallow if necessary
        if [ -e /srv/maverick/software/maverick/.git/shallow ]; then
            echo "- Unshallow-ing git clone"
            $(cd /srv/maverick/software/maverick; git fetch --unshallow)
        fi
        # Re-ref origin if necessary
        $(cd /srv/maverick/software/maverick; git config remote.origin.fetch |grep '*:refs' >/dev/null 2>&1)
        if [ $? -eq 1 ]; then
            echo "- Changing origin refs for all remote branches"
            $(cd /srv/maverick/software/maverick; git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/*)
        fi
        # Checkout new branch
        # temporarily force checkout to avoid issues with uncommitted changes, for quicker fixes
        CHECKOUT=$(cd /srv/maverick/software/maverick; git fetch; git reset --hard origin/$MAVERICK_BRANCH)

        # orignal code
        #CHECKOUT=$(cd /srv/maverick/software/maverick; git fetch; git checkout $MAVERICK_BRANCH)
    fi

    # Next, do a git pull to update maverick code
    if [ -e /srv/maverick/software/maverick/conf/puppet.conf ]; then
        if [ $EUID -eq 0 ]; then
            echo -n "Updating maverick: "
            su mav -c "cd /srv/maverick/software/maverick; git pull origin"
            if [ -d "/srv/maverick/software/visiond" ]; then
                echo -n "Updating visiond: "
                su mav -c "cd /srv/maverick/software/visiond; git pull origin"
            fi
            if [ -d "/srv/maverick/software/maverick-web-legacy" ]; then
                echo -n "Updating maverick-web-legacy: "
                su mav -c "cd /srv/maverick/software/maverick-web-legacy; git pull origin"
            fi
            if [ -d "/srv/maverick/code/maverick-web" ]; then
                echo -n "Updating maverick-web: "
                su mav -c "cd /srv/maverick/code/maverick-web; git pull origin"
            fi
            if [ -d "/srv/maverick/software/maverick-web" ]; then
                echo -n "Updating maverick-web-dist: "
                su mav -c "cd /srv/maverick/software/maverick-web; git pull origin"
            fi
            if [ -d "/srv/maverick/software/maverick-api" ]; then
                echo -n "Updating maverick-api: "
                su mav -c "cd /srv/maverick/software/maverick-api; git pull origin"
            fi
            if [ -d "/srv/maverick/software/maverick-discovery" ]; then
                echo -n "Updating maverick-discovery: "
                su mav -c "cd /srv/maverick/software/maverick-discovery; git pull origin"
            fi
        elif [ $USER == "mav" ]; then
            echo -n "Updating maverick: "
            # temporarily force checkout to avoid issues with uncommitted changes, for quicker fixes
            cd /srv/maverick/software/maverick; git fetch; git reset --hard origin/$MAVERICK_BRANCH

            # original command was:
#            cd /srv/maverick/software/maverick; git pull origin;
            if [ -d "/srv/maverick/software/visiond" ]; then
                echo -n "Updating visiond: "
                cd /srv/maverick/software/visiond; git pull origin;
            fi
            if [ -d "/srv/maverick/software/maverick-web-legacy" ]; then
                echo -n "Updating maverick-web-legacy: "
                cd /srv/maverick/software/maverick-web-legacy; git pull origin;
            fi
            if [ -d "/srv/maverick/code/maverick-web" ]; then
                echo -n "Updating maverick-web: "
                cd /srv/maverick/code/maverick-web; git pull origin
            fi
            if [ -d "/srv/maverick/software/maverick-web" ]; then
                echo -n "Updating maverick-web-dist: "
                cd /srv/maverick/software/maverick-web; git pull origin
            fi
            if [ -d "/srv/maverick/software/maverick-api" ]; then
                echo -n "Updating maverick-api: "
                cd /srv/maverick/software/maverick-api; git pull origin
            fi
            if [ -d "/srv/maverick/software/maverick-discovery" ]; then
                echo -n "Updating maverick-discovery: "
                cd /srv/maverick/software/maverick-discovery; git pull origin
            fi
        fi
        echo
        echo "${green}Maverick update completed${reset}"
        echo
    else
        echo
        echo "${bgr}Error: Maverick not found in expected location: /srv/maverick/software/maverick${reset}"
        echo
    fi

    # Finally, exit
    exit 0
fi

# If unshallow set, action and then exit
if [ "$UNSHALLOW" == "true" ]; then

    # Is the current directory a git repo?
    reponame=$(basename `pwd`)
    if [ ! -e ./.git ]; then
        echo "${bgbl}${bold}${red}Error: current directory ${white}${reponame}${red} is not a git repo${reset}"
        echo
        exit 1
    fi

    # Is the current directory shallow?
    if [ ! -e ./.git/shallow ]; then
        echo "${bgbl}${bold}${red}Error: the git repo in the current directory ${white}${reponame}${red} is not shallow${reset}"
        echo
        exit 1
    fi

    echo "Current directory ${bold}${reponame}${reset} is a shallow git repo${reset}"
    if [ "$CONFIRM" != "true" ]; then
        echo "Do you want to unshallow this repo?"
        select yn in "Yes" "No"; do
            case $yn in
                Yes )
                    break;;
                No )
                    exit 1;;
            esac
        done
    fi

    # If we get here, we're good to go
    git fetch --unshallow
    git config remote.origin.fetch |grep '*:refs' >/dev/null 2>&1
    if [ $? -eq 1 ]; then
        echo
        echo "Changing origin refs for all remote branches"
        git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/*
    fi
    git fetch
    echo
    exit 0
fi

# If info set, action and then exit
if [ "$INFO" == "true" ]; then
    if [ -e /srv/maverick/config/maverick/maverick-environment.conf ]; then
        environment=$(cat /srv/maverick/config/maverick/maverick-environment.conf)
    fi
    mavenv ${environment}
    echo
    /srv/maverick/software/maverick/bin/maverick-info
    echo
    exit 0
fi

# If netinfo set, action and then exit
if [ "$NETINFO" == "true" ]; then
    if [ -e /srv/maverick/config/maverick/maverick-environment.conf ]; then
        environment=$(cat /srv/maverick/config/maverick/maverick-environment.conf)
    fi
    mavenv ${environment}
    echo
    /srv/maverick/software/maverick/bin/maverick-netinfo
    echo
    exit 0
fi

# If status set, action and then exit
if [ "$STATUS" == "true" ]; then
    if [ ! -z "$SERVICE" ]; then
        echo "Status of service: ${SERVICE}"
        systemctl -l -q --no-pager status "maverick-${SERVICE}"
        if [ $? -eq 4 ]; then
            echo
            exit 0
        fi
        echo
        $(systemctl --no-pager status "maverick-$SERVICE" >/dev/null 2>&1)
        if [ $? -eq 0 ]; then
            echo "Service ${SERVICE} is ${green}Running${reset}"
        else
            echo "Service ${SERVICE} is ${red}Stopped${reset}"
        fi
        $(systemctl is-enabled "maverick-$SERVICE" >/dev/null 2>&1)
        if [ $? -eq 0 ]; then
            echo "Service ${SERVICE} is ${green}Enabled${reset} at boot time"
        else
            echo "Service ${SERVICE} is ${red}Disabled${reset} at boot time"
        fi
        echo
    else
        # Display current environment
        if [ -e /srv/maverick/config/maverick/maverick-environment.conf ]; then
            environment=$(cat /srv/maverick/config/maverick/maverick-environment.conf)
        fi
        mavenv ${environment}
        echo

        # If status directory doesn't exist, display an error and exit
        if [ ! -d /srv/maverick/software/maverick/bin/status.d ]; then
            echo "${bold}${red}Error: ~/software/maverick/bin/status.d directory does not exist${reset}"
            echo
            exit 0
        fi

        # Set output title
        statusout+="Service:Description: Status | At Boot\n"
        statusout+="------------:------------:------------------\n"

        # Iterate through status directories in order
        for statusdir in `ls -d /srv/maverick/software/maverick/bin/status.d/* | sort -V`
        do
            if [ -f "$statusdir/__init__" ]
            then
                statusout+="____________\n"
                title=$(cat $statusdir/__init__)
                statusout+="${blue}${title}${reset}\n"
                # Iterate through each file in status directory, in order, and output status for each
                for statusfile in `ls $statusdir/*.status 2>/dev/null | grep -v __init__ | sort -V`
                do
                    while IFS=, read -r _service _description
                    do
                        (systemctl status "maverick-${_service}" >/dev/null 2>&1); status=$?; (systemctl is-enabled "maverick-${_service}" >/dev/null 2>&1); statusen=$?; statusout+=$(status "${_service}" "${_description}" $status $statusen)
                    done < $statusfile
                done
            fi
        done

        echo -e $statusout | column -c 3 -s : -t
        echo
    fi
    exit 0
fi

# If start requested, action and then exit
if [ "$START" == "true" ]; then
    if [ -z "${SERVICE}" ]; then
        echo "Error: service name or 'all' not specified"
    elif [ "${SERVICE}" == "all" ]; then
        echo "Starting all services"
        services=$(getservices)
        for service in $services; do
            if [ $(systemctl is-enabled $service) == "enabled" ]; then
                echo -n "Starting service $service: "
                startservice "$service"
            else
                echo "$service is disabled, not starting"
            fi
        done
    else
        echo "Starting service: ${SERVICE}"
        startservice "maverick-${SERVICE}"
    fi
    echo
    exit 0
fi

# If stop requested, action and then exit
if [ "$STOP" == "true" ]; then
    if [ -z "${SERVICE}" ]; then
        echo "Error: service name or 'all' not specified"
    elif [ "${SERVICE}" == "all" ]; then
        echo "Stopping all services"
        services=$(getservices)
        for service in $services; do
            if [ $(systemctl is-enabled $service) == "enabled" ]; then
                echo -n "Stopping service $service: "
                stopservice "$service"
            else
                echo "$service is disabled, not stopping"
            fi
        done
    else
        echo "Stopping service: ${SERVICE}"
        stopservice "maverick-${SERVICE}"
    fi
    echo
    exit 0
fi

# If restart requested, action stop then start
if [ "$RESTART" == "true" ]; then
    if [ -z "${SERVICE}" ]; then
        echo "Error: service name or 'all' not specified"
    else
        echo "Restarting service: ${SERVICE}"
        stopservice "maverick-${SERVICE}"
        startservice "maverick-${SERVICE}"
    fi
    echo
    exit 0
fi

# If log requested, action and then exit
if [ "$LOG" == "true" ]; then
    if [ -z "${SERVICE}" ]; then
        echo "Error: service name or 'all' not specified"
    else
        echo "Displaying service log: ${SERVICE}"
        sudo journalctl -u maverick-${SERVICE} -f
    fi
    echo
    exit 0
fi

# If enable requested, action and then exit
if [ "$ENABLE" == "true" ]; then
    if [ -z "${SERVICE}" ]; then
        echo "Error: service name not specified"
    else
        echo "Enabling service: ${SERVICE}"
        srvresult=$(sudo systemctl enable "maverick-${SERVICE}" 2>&1)
        if [ $? -eq 0 ]; then
            echo " Enable: ${green}Success${reset}"
        else
            echo " Enable: ${red}Failure${reset}: $srvresult"
        fi
    fi
    echo
    exit 0
fi

# If disable requested, action and then exit
if [ "$DISABLE" == "true" ]; then
    if [ -z "${SERVICE}" ]; then
        echo "Error: service name or 'all' not specified"
    elif [ "${SERVICE}" == "all" ]; then
        echo "Disabling all services"
        services=$(getservices)
        for service in $services; do
            if [ $(systemctl is-enabled $service) == "enabled" ]; then
                echo "Stopping and Disabling service $service: "
                stopservice "$service"
                disableservice "$service"
            else
                echo "$service is already disabled"
            fi
        done
    else
        echo "Stopping and Disabling service: ${SERVICE}"
        stopservice "maverick-${SERVICE}"
        disableservice "maverick-${SERVICE}"
    fi
    echo
    exit 0
fi

# Read environment marker if it exists
if [ -e /srv/maverick/config/maverick/maverick-environment.conf ]; then
    environment=$(cat /srv/maverick/config/maverick/maverick-environment.conf)
    if [[ $environment && "$ENV" != "" ]]; then
        echo "Environment marker set but is being ignored as --env is set"
    elif [[ "$environment" == "bootstrap" || "$environment" == "dev" || "$environment" == "flight" || "$environment" == "minimal" ]]; then
        echo "Environment marker set and is being used to set maverick environment: ${environment}"
        ENV=$environment
    else
        echo "Environment marker set but not recognised"
    fi
fi

# If environment not set to dev or flight, exit
if [[ "$ENV" != "dev" && "$ENV" != "flight" && "$ENV" != "bootstrap" && "$ENV" != "minimal" ]]; then
    echo "Error: --env not set to a recognised environment (bootstrap, dev, flight or minimal)"
    echo
    usage
fi

# If configure not set, exit
if [ "$CONFIGURE" != "true" ]; then
    echo "Error: configure not set"
    echo
    usage
fi
### If we get here, we are doing a configure run.  Everything below is part of configure pre-checks and run

# Ensure daily apt processes aren't running
aptpgrep=$(pgrep aptd)
if [ $? -eq 0 ]; then
    echo "Aptd process running, shutting down before proceeding"
    if [ $EUID -eq 0 ]; then
        systemctl stop apt-daily.service >/dev/null 2>&1
        systemctl stop apt-daily-upgrade.service >/dev/null 2>&1
        pkill aptd >/dev/null 2>&1
    else
        sudo systemctl stop apt-daily.service >/dev/null 2>&1
        sudo systemctl stop apt-daily-upgrade.service >/dev/null 2>&1
        sudo pkill aptd >/dev/null 2>&1
    fi
    sleep 5
fi

# Check that there are no apt/dpkg processes going on
_aptdpkg=$(ps -ef |egrep 'apt|dpkg' |grep -v grep |grep -v dnsmasq |grep -v gnupg)
if  [ "z${_aptdpkg}" != "z" ]; then
    echo "${red}Error: There are active apt/dpkg processes.  This will interfere with Maverick, please ensure there are no apt/dpkg processes before running Maverick.${reset}"
    exit 1
fi

# Check that an apt update has been done recently
if [ -f /var/lib/apt/periodic/update-success-stamp ]; then
    last_aptupdate=$(date -d @$( stat -c %Y /var/lib/apt/periodic/update-success-stamp ) +%Y%m%d%H%M%S)
else
    last_aptupdate=0
fi
now_timestamp=$(date +%Y%m%d%H%M%S)
update_diff=`expr $now_timestamp - $last_aptupdate`
# If apt update hasn't been run within the last day, run an update
if [ "$update_diff" -gt "86400" ]; then
    echo "Warning: apt package cache has not been updated within the last day, running update"
    sudo apt update >/dev/null 2>&1
fi

# Check that puppet, hiera and facter are not installed through system packages
for pkg in "puppet" "hiera" "facter" "ruby-rgen"; do
    if dpkg --get-selections | grep "^$pkg[[:space:]]*install$" >/dev/null; then
        echo "Warning: $pkg installed as a system package, removing.."
        if [ $EUID -eq 0 ]; then
            DEBIAN_FRONTEND=noninteractive apt-get -y remove $pkg >/dev/null 2>&1
        else
            sudo DEBIAN_FRONTEND=noninteractive apt-get -y remove $pkg >/dev/null 2>&1
        fi
    fi
done

# Check that rsync
if ! hash rsync 2>/dev/null; then
    echo 'rsync not installed, installing..'
    if [ $EUID -eq 0 ]; then
        DEBIAN_FRONTEND=noninteractive apt-get -y install rsync >/dev/null 2>&1
    else
        sudo DEBIAN_FRONTEND=noninteractive apt-get -y install rsync >/dev/null 2>&1
    fi
fi

# Check that ruby/gem is installed
if ! hash gem 2>/dev/null; then
    echo 'gem not installed, installing..'
    if [ $EUID -eq 0 ]; then
        DEBIAN_FRONTEND=noninteractive apt-get -y install ruby >/dev/null 2>&1
    else
        sudo DEBIAN_FRONTEND=noninteractive apt-get -y install ruby >/dev/null 2>&1
    fi
fi

# Check that ruby-shadow is installed
_rubyshadow=$(dpkg -s ruby-shadow 2>/dev/null)
if [ "z$_rubyshadow" == "z" ]; then
    echo "Installing ruby-shadow for password management"
    if [ $EUID -eq 0 ]; then
        DEBIAN_FRONTEND=noninteractive apt-get -y install ruby-shadow >/dev/null 2>&1
    else
        sudo DEBIAN_FRONTEND=noninteractive apt-get -y install ruby-shadow >/dev/null 2>&1
    fi
fi

# Check that ruby-dev is installed
_rubydev=$(dpkg -s ruby-dev 2>/dev/null)
if [ "z$_rubydev" == "z" ]; then
    echo "Installing ruby-dev for gems"
    if [ $EUID -eq 0 ]; then
        DEBIAN_FRONTEND=noninteractive apt-get -y install ruby-dev >/dev/null 2>&1
    else
        sudo DEBIAN_FRONTEND=noninteractive apt-get -y install ruby-dev >/dev/null 2>&1
    fi
fi

# Check that puppet is installed through gem
declare -A GEMVERSIONS=( [puppet]=7.27.0 [hiera]=3.12.0 [facter]=4.5.1 [puppet-strings]=4.1.2 )
for pkg in "hiera" "facter" "puppet" "puppet-strings"; do
    if ! gem list $pkg -v ${GEMVERSIONS[$pkg]} -i >/dev/null; then
        echo "Installing $pkg from gems"
        if [ $EUID -eq 0 ]; then
            gem uninstall $pkg --ignore-dependencies --executables --force >/dev/null
            if [ -e /usr/bin/$pkg ]; then rm -f /usr/bin/$pkg; fi
            gem install $pkg --force -v ${GEMVERSIONS[$pkg]} >/dev/null
        else
            sudo gem uninstall $pkg --ignore-dependencies --executables --force >/dev/null
            if [ -e /usr/bin/$pkg ]; then sudo rm -f /usr/bin/$pkg; fi
            sudo gem install $pkg --force -v ${GEMVERSIONS[$pkg]} >/dev/null
        fi
    fi
done
if [ $EUID -eq 0 ]; then
    gem cleanup >/dev/null
else
    sudo gem cleanup >/dev/null
fi

# Fix for Ubuntu 14.10 and Puppet 4.10.1: https://github.com/goodrobots/maverick/issues/466
# Long-term fix already in Puppet 4.10.2
_ubuntu=$(/bin/grep -e 'DISTRIB_RELEASE\=14\.' /etc/lsb-release 2>/dev/null)
_puppet=$(gem list puppet |grep puppet |grep '4.10.1')
if [ -e /var/lib/gems/1.9.1/gems ]; then
    _patchfiles=$(grep -lr 'Gem::Version.new(RUBY_VERSION)' /var/lib/gems/1.9.1/gems)
else
    _patchfiles=""
fi
if [ "z${_ubuntu}" != "z" -a "z${_puppet}" != "z" -a "z${_patchfiles}" != "z" ]; then
    echo "Patching puppet 4.10.1 on ubuntu 14"
    sudo sed -i -e 's/Gem::Version.new(RUBY_VERSION)/Gem::Version.new(RUBY_VERSION.dup)/' $_patchfiles
fi

# Check that puppet is installed
if ! hash puppet 2>/dev/null; then
    echo 'Puppet not installed, something has gone wrong..'
    exit 1
fi

# Check that python is installed
if ! hash python3 2>/dev/null; then
    echo 'Python not installed, attempting to install..'
    if hash apt-get 2>/dev/null; then
        if [ $EUID -eq 0 ]; then
            DEBIAN_FRONTEND=noninteractive apt-get -y install python3 >/dev/null 2>&1
        elif [ $USER == "mav" ]; then
            sudo DEBIAN_FRONTEND=noninteractive apt-get -y install python3 >/dev/null 2>&1
        fi
        if hash python3; then
            pythoninstalled=true
        fi
    fi
else
    pythoninstalled=true
fi
if ! $pythoninstalled; then
    echo 'Error: Python not installed and could not be installed'
    echo
    exit 1
fi

# Check that python-pip is installed
if ! hash pip3 2>/dev/null; then
    echo 'Python Pip not installed, attempting to install..'
    if hash apt-get 2>/dev/null; then
        if [ $EUID -eq 0 ]; then
            DEBIAN_FRONTEND=noninteractive apt-get -y install python3-pip >/dev/null 2>&1
        elif [ $USER == "mav" ]; then
            sudo DEBIAN_FRONTEND=noninteractive apt-get -y install python3-pip >/dev/null 2>&1
        fi
    fi
    if hash pip3 2>/dev/null; then
        echo "Upgrading pip"
        pip3 install --upgrade pip >/dev/null 2>&1
    fi
fi

# Check that openssh-server is installed
_pkg=$(dpkg -s openssh-server 2>/dev/null)
if [ "z$_pkg" == "z" ]; then
    echo "Installing openssh-server"
    if [ $EUID -eq 0 ]; then
        DEBIAN_FRONTEND=noninteractive apt-get -y install openssh-server >/dev/null 2>&1
    else
        sudo DEBIAN_FRONTEND=noninteractive apt-get -y install openssh-server >/dev/null 2>&1
    fi
fi

# If git is installed at this point, then force git to ignore any changes to localconf.json
#  in the current directory, which might contain sensitive information
if hash git 2>/dev/null; then
    if [[ $EUID -eq 0 && $SUDO_USER != "" && $SUDO_USER != "root" && -e conf/localconf.json ]]; then
        su $SUDO_USER -c "git update-index --assume-unchanged conf/localconf.json"
    fi
fi

# Check that maverick configure or puppet apply is not already running
_puppet_apply=$(ps -ef |grep 'puppet apply' |grep -v grep)
if [ ! -z "$_puppet_apply" ]; then
    echo
    echo "${red}Error: maverick configure or puppet apply is already running${reset}"
    echo
    exit 1
fi

# OK we're good to go!
mavenv ${ENV}
if [ "x${DRYRUN}" == "x" ]; then
    echo "${bgbl}${bold}${green}Proceeding to update system configuration - please be patient, this can take a while..${reset}"
    RUNMODE="--no-noop"
else
    echo "${bgbl}${bold}${blue}Dry run requested, running configure in a readonly/nondestructive mode${reset}"
    RUNMODE="--noop"
fi
if [ ! -z $MODULE ]; then
    echo "${bgbl}${bold}${blue}Module specified, restricting configure to ${MODULE}${reset}"
    TAGS="--tags ${MODULE}"
else
    TAGS=""
fi
if [ ! -z $DEBUG ]; then
    echo "${bgbl}${bold}${red}Debug specified, very verbose logging enabled${reset}"
    DEBUG="--debug"
else
    DEBUG=""
fi
if [ ! -z $PROFILE ]; then
    echo "${bgbl}${bold}${red}Profile specified, performance profiling enabled${reset}"
    PROFILE="--profile"
else
    PROFILE=""
fi
echo

# If /boot/maverick and /srv/maverick exists, move the contents and use them
if [ -e /srv/maverick -a -e /boot/maverick ]; then
    echo "Migrating supplied config to maverick location"
    sudo rsync -K -a /boot/maverick/* /srv/maverick/config >/dev/null 2>&1
    if [ $? -eq 0 ]; then
        sudo rm -rf /boot/maverick
    fi
fi

# If puppet root dir doesn't exist, create it
if [ ! -d /opt/puppetlabs/puppet ]; then
    sudo mkdir -p /opt/puppetlabs/puppet
fi

DT=$(date +"%Y-%m-%d-%H-%M")
# If installed maverick exists use that logpath, otherwise use /var/tmp
if [ -e /srv/maverick/var/log/maverick ]; then
    LOGPATH=/srv/maverick/var/log/maverick
else
    LOGPATH=/var/tmp
fi
if [ -e ./conf/puppet.conf -a ! -e /srv/maverick/software/maverick/conf/puppet.conf ]; then
    if [ $EUID -eq 0 ]; then
        STDLIB_LOG_DEPRECATIONS=false puppet apply --color=true --confdir=conf --config=./conf/puppet-bootstrap.conf --environmentpath=$_path/conf/environments --environment $ENV --modulepath=$_path/manifests/maverick-modules:$_path/manifests/puppet-modules:$_path/manifests/custom-modules:/srv/maverick/code/maverick/custom-modules $TAGS $RUNMODE $DEBUG $PROFILE manifests/init.pp 2>&1 |tee $LOGPATH/maverick.$ENV.$DT.log
    elif [ $USER == "mav" ]; then
        sudo -H STDLIB_LOG_DEPRECATIONS=false puppet apply --color=true --confdir=conf --config=./conf/puppet-bootstrap.conf --environmentpath=$_path/conf/environments --environment $ENV --modulepath=$_path/manifests/maverick-modules:$_path/manifests/puppet-modules:$_path/manifests/custom-modules:/srv/maverick/code/maverick/custom-modules $TAGS $RUNMODE $DEBUG $PROFILE manifests/init.pp 2>&1 |tee $LOGPATH/maverick.$ENV.$DT.log
    fi
elif [ -e /srv/maverick/software/maverick/conf/puppet.conf ]; then
    cwd=$(pwd)
    cd /srv/maverick/software/maverick
    if [ $EUID -eq 0 ]; then
        STDLIB_LOG_DEPRECATIONS=false puppet apply --profile --color=true --confdir=conf --environment $ENV $TAGS $RUNMODE $DEBUG $PROFILE manifests/init.pp 2>&1 |tee $LOGPATH/maverick.$ENV.$DT.log
    elif [ $USER == "mav" ]; then
        sudo -H STDLIB_LOG_DEPRECATIONS=false puppet apply --profile --color=true --confdir=conf --environment $ENV $TAGS $RUNMODE $DEBUG $PROFILE manifests/init.pp 2>&1 |tee $LOGPATH/maverick.$ENV.$DT.log
    fi
    cd $cwd
else
    echo "Error: Maverick software not found in current directory or expected location: /srv/maverick/software/maverick"
    exit 1
fi

# Set permissions of last run yaml so it can be read by mav user
if [ $EUID -eq 0 ]; then
    chown mav /var/lib/puppet/state/*
else
    sudo chown mav /var/lib/puppet/state/*
fi

# If maverick not running from expected home assume we want to migrate local-node files
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
if [ x"$DIR" != x"/srv/maverick/software/maverick/bin" ]; then
    cp -unp $DIR/../conf/local-nodes/*.json /srv/maverick/config/maverick/local-nodes >/dev/null 2>&1
fi

# If bootstrap environment, print a reboot warning
if [ $ENV == "bootstrap" ]; then
    echo
    echo "-------------------------"
    echo "WARNING: If this is the first bootstrap run, please reboot NOW to activate system changes."
    echo "If system is not rebooted after first bootstrap run, further runs may not work as expected."
    echo "After reboot, login as 'mav' user - default password is 'wingman'"
    echo "-------------------------"
fi

# Finish up
echo
echo "Maverick finished, happy flying :)"
echo
